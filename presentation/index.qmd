
## About myself

<!--- setup r lib -->
```{r}
#| label: "setup"
#| echo: false
#| include: false
#| eval: true

#library(knitr)
library(cowplot)
library(scater)
library(muscat)
library(ggplot2)
library(ExperimentHub)
```


- PhD student in Bioinformatics under Dr. Amrit Singh supervision

- BSc. in Math + minor in Data Science

- What does "bioinformatician" do? 
  - Assist researchers like you to better understand what your data means
  - ~~We're just coders that know little bit more bio~~ ...
  
- Currently working in creating pipeline, tools, models analyzing biological data in an automated-fashion
  - Focused on machine learning & [AI]{.secondary}
  - [Reproducible]{.tertiary} workflows 

  


## Single Cell RNA-seq

What is single cell RNA sequencing?





## Loading data

The data is from a study [@kang2018multiplexed] and publicly avaliable  through R's `ExperimentHub` function


```{r}
#| label: "load-data"
#| echo: true
#| eval: true


eh <- ExperimentHub() #  Initialize the hub as some list object
sce <- eh[["EH2259"]] # We could then extract the match entry by taking this entry from out hub
# Then print it
sce
```

- After loaded data should inspect basic information
- What are rows? column? size of data?
- [Rows]{.tertiary} = genes
- [Columns]{.secondary} = cells

## Preprocessing of data before analysis

The data retrieved is [rawest form]{.secondary}, not all of it is suitable for analysis.

Caveats:

::: {.incremental}

- Undetected genes
- Cells with very few or many detected genes
- Lowly expressed genes
- unnormalized expression values

:::




::: {.fragment}

This is usually the **quality control** (QC) step. This could potentially be another tutorial, so not deeply covered today.

We only perfom simple actions

:::

::: {.notes}

- QC to remove damaged cells, poor sequencing libraries,  error

:::

## Remove undetected genes


```{r}
#| label: "remove-undetected"
#| echo: true
#| eval: true

sce <- sce[rowSums(counts(sce) > 0) > 0, ]
sce
```
- Reduced from $35635$ genes to $18890$, nearly 16K genes that were not detected in any cells

::: {.notes}

Recall rows are genes, so that means we need to perform some operations with our rows

We need to check expression value of each cell for any given gene:

- If detected, we should have a non-zero expression value in a cell of a given gene
- If not detected, we should have a zero expression value in a cell of a given gene
- This translates to `counts(sce) > 0`

There is a convenient function `rowSums()` just add up each element of a row.


:::

## Remove cells with few or many detected genes

```{r}
#| label: "remove-few-many"
#| echo: true
#| eval: true

# We need additional support to compute per cell quality control metrics from scater package
qc <- scater::perCellQCMetrics(sce)
# remove cells with few or many detected genes
ol <- scater::isOutlier(metric = qc$detected, nmads = 2, log = TRUE)
# Then we remove those are consider as outlier
sce <- sce[, !ol] # This means retain column that are not ol
dim(sce)
```
- Now we changed 29065 cells to 26820 cells, where these cells are either overly abundant or too few


## Remove lowly expressed genes

```{r}
#| label: "remove-lowly-expressed"
#| echo: true
#| eval: true

# Similar to early, see pattern now with rowSums
# But we want to at least have 10 cells that high expression value, this threshold could change
sce <- sce[rowSums(counts(sce) > 1) >= 10, ]
sce
```
- Interesting now, we only retained 7118 genes from original 35K and 26820 cells from original 29K.
- This would be our final "filtered data", but not entirely ready for analysis
  - Need to normalize these expression values
  
## Normalize expression values

Calculate a log2-transformed normalized expression values:

- dividing each count by its size factor
- adding pseudo count of 1
- log transforming

```{r}
#| label: "normalize-counts"
#| echo: true
#| eval: true

# compute sum-factors & normalize
sce <- scater::computeLibraryFactors(sce)
sce <- scater::logNormCounts(sce)
sce
```
::: {.fragment}

This is our finalized data that have gone through series of QC steps. Now, we move to **muscat**

:::

## MUSCAT

multi-sample multi-group scRNA-seq analysis tools [@crowell2020muscat]

It expects a SCE and requires cell metadata columns to have:

- sample_id : sample identifier i.e. Nautilus_trt_3
- cluster id: subpopulation (cluster assignment) i.e. T cells, monocytes
- group id: experimental group/condition i.e. control/treatment, healthy/diseased


```{r}
#| label: "prepare-muscat"
#| echo: true
#| eval: true
sce$id <- paste0(sce$stim, sce$ind)
sce <- muscat::prepSCE(sce, 
    kid = "cell", # subpopulation assignments
    gid = "stim",  # group IDs (ctrl/stim)
    sid = "id",   # sample IDs (ctrl/stim.1234)
    drop = TRUE)  # drop all other colData columns
sce
```
## MUSCAT

Sample level analysis (pseudobulk)

- Aggregate measurements for each sample (in each cluster)
- Leverage existing robust bulk RNA-seq frameworks, edgeR [@robinson2010edger], DESeq2 [@love2014moderated] , limma [@ritchie2015limma]

Cell level analysis ([Important]{.tertiary}, what we care, but limited)

- Fit linear mixed model for each gene to cell level measurement data

Under the hood, these involves statistics modelling, mainly linear regression in high dimension setting.


## Sample level

```{r}
#| label: "sample-level-agg"
#| eval: true
#| echo: true
pb <- muscat::aggregateData(sce,
    assay = "counts", fun = "sum",
    by = c("cluster_id", "sample_id"))
# Note it changed to 16 clusters, which is pre-defined earlier
pb
```
## Sample level -- model fitting

```{r}
#| label: "sample-level-model-fitting"
#| echo: true
ei <- metadata(sce)$experiment_info
set.seed(3)
dplyr::sample_n(ei, 3)
# This is actual model
mm <- model.matrix(~ 0 + ei$group_id)
dimnames(mm) <- list(ei$sample_id, levels(ei$group_id))
# construct design & contrast matrix
contrast <- limma::makeContrasts("stim-ctrl", levels = mm)
# run DS analysis
sample_res <- muscat::pbDS(pb, design = mm, contrast = contrast, verbose = F)
# We have a list of top tables for each cluster
tbl <- sample_res$table[[1]]
names(tbl)
```

## Sample level -- between cluster concordance

- which genes are DE in only a single (or very few) clusters? 
- How many DE genes are shared between clusters?

```{r}
#| echo: true
# filter FDR < 5%, abs(logFC) > 1 & sort by adj. p-value
tbl_fil <- lapply(tbl, function(u) {
  u <- dplyr::filter(u, p_adj.loc < 0.05, abs(logFC) > 1)
  dplyr::arrange(u, p_adj.loc)
})

de_gs_by_k <- purrr::map(tbl_fil, "gene")
UpSetR::upset(UpSetR::fromList(de_gs_by_k))
```

## Sample level -- pseudobulk heatmap top N DS genes per cluster 

```{r}
#| label: "heatmap-per-cluster"
#| echo: true
# top-5 DS genes per cluster
muscat::pbHeatmap(sce, sample_res, top_n = 5)
```

- Good when wanting to gain an overview of numerous DE testing results for many clusters

## Sample level -- pseudobulk heatmap top N DS genes for single cluster 

```{r}
#| label: "heatmap-for-single-cluster"
#| echo: true
# top-5 DS genes per cluster
muscat::pbHeatmap(sce, sample_res, k = "B cells")
```

Moreover, it provides a set of options regarding which cluster(s), gene(s), and comparison to include (arguments k, g and c, respectively).

## Sample level -- pseudobulk heatmap for single gene all clusters

```{r}
#| label: "heatmap-single-gene-all-clusters"
#| echo: true
# single gene across all clusters
muscat::pbHeatmap(sce, sample_res, g = "ISG20")
```

- Also could visualize cluster-sample means of a single gene of interest across all clusters 
  - Identify cell-types that are affected similarly by different experimental conditions

## Cell level

```{r}
#| label: "cell-level-model"
#| echo: true

scater::plotExpression(sce[, sce$cluster_id == "B cells"],
  features = tbl_fil$`B cells`$gene[seq_len(6)],
  x = "sample_id", colour_by = "group_id", ncol = 3) +
  guides(fill = guide_legend(override.aes = list(size = 5, alpha = 1))) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

- For changes of high interest, we can view the cell-level expression profiles of a specific gene across samples or groups

## Conclusion

- scRNA-seq data is messy by nature â€” preprocessing is essential before any analysis.
- We used scater for:
  - Removing undetected/low-quality genes & cells
  - Normalizing expression values
- MUSCAT provides series of convenient functions to analyze scRNA-seq data
  - Although it focuses on bulk-level by aggregating them cells
  

# Thanks! {.thanks}

## {#acknowledgements .smaller}

:::: {.columns}

::: {.column width="50%"}


- [Dr. Amrit Singh]{.bold}
- Dr. Young Woong Kim
- Dr. Maryam Ahmadzadeh
- Rishika Daswani
- Roy He
- Michael Yoon
- Jeffrey Tang
- Akshdeep Sandhu
- Yovindu Don
- Raam Sivakumar
- Prabhleen Sandhu
- Mingming Zhang
- Samuel Leung

:::
::: {.column width="50%"}

```{r}
knitr::include_graphics("assets/lab_pic.jpg")
```

:::

::::


::: {.footer}
![](assets/logo.png)
:::

## Reference

::: {#refs}
:::
